// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import {Test} from "forge-std/Test.sol";
import {PacketDecoder} from "../src/libraries/PacketDecoder.sol";

contract PacketDecoderTest is Test {
    using PacketDecoder for bytes;

    bytes32 internal constant _ORIGINATOR_HASH =
        0xe050352fd91310f74e0b5da3e1ea5d98274bab69eb08018216fcb872cda72253;

    function testDecode_FULL_ABI_Success() public pure {
        bytes
            memory message = hex

        PacketDecoder.TssMessage memory tssm = message.decodeTssMessage();

        assertEq(tssm.originatorHash, _ORIGINATOR_HASH);
        assertEq(tssm.signingId, uint64(1542799));
        assertEq(
            uint8(tssm.encoderType),
            uint8(PacketDecoder.EncoderType.FULL_ABI)
        );
        assertEq(tssm.sourceTimestamp, uint64(1749920929));

        PacketDecoder.FullResult memory fr = tssm.packet.decodeFullResult();
        assertEq(fr.clientID, "from_scan");
        assertEq(fr.oracleScriptID, uint64(14));
        assertEq(fr.callData, hex"00");
        assertEq(fr.askCount, uint64(16));
        assertEq(fr.minCount, uint64(10));
        assertEq(fr.requestID, uint64(187617));
        assertEq(fr.ansCount, uint64(12));
        assertEq(fr.requestTime, uint64(1749920924));
        assertEq(fr.resolveTime, uint64(1749920929));
        assertEq(
            uint8(fr.resolveStatus),
            uint8(PacketDecoder.ResolveStatus.RESOLVE_STATUS_SUCCESS)
        );
        assertEq(
            fr.result,
            hex"0000000600000004476f6c640000000653696c76657200000006436f7070657200000008506c6174696e756d0000000948524320537465656c0000000849726f6e204f7265000000060000004fe87e2ec000000000d85be0e0000000001c40f8a00000001c2469d5800000001411eb9e000000000238825480"
        );
    }

    function testDecode_PARTIAL_ABI_Success() public pure {
        bytes
            memory message = hex

        PacketDecoder.TssMessage memory tssm = message.decodeTssMessage();

        assertEq(tssm.originatorHash, _ORIGINATOR_HASH);
        assertEq(tssm.signingId, uint64(1547972));
        assertEq(
            uint8(tssm.encoderType),
            uint8(PacketDecoder.EncoderType.PARTIAL_ABI)
        );
        assertEq(tssm.sourceTimestamp, uint64(1749929243));

        PacketDecoder.PartialResult memory pr = tssm
            .packet
            .decodePartialResult();
        assertEq(pr.oracleScriptID, uint64(14));
        assertEq(pr.callData, hex"00");
        assertEq(pr.minCount, uint64(5));
        assertEq(pr.requestID, uint64(187716));
        assertEq(pr.resolveTime, uint64(1749929243));
        assertEq(
            uint8(pr.resolveStatus),
            uint8(PacketDecoder.ResolveStatus.RESOLVE_STATUS_SUCCESS)
        );
        assertEq(
            pr.result,
            hex"0000000600000004476f6c640000000653696c76657200000006436f7070657200000008506c6174696e756d0000000948524320537465656c0000000849726f6e204f7265000000060000004fe87e2ec000000000d85be0e0000000001c40f8a00000001c2469d5800000001411eb9e000000000238825480"
        );
    }

    function testDecode_PROTO_Success() public pure {
        bytes
            memory message = hex"E050352FD91310F74E0B5DA3E1EA5D98274BAB69EB08018216FCB872CDA7225300000000684DD476000000000017A32A89CBF5AF01E2ADB30A0966726F6D5F7363616E100C1A2C0000002096FAC1EC49F38C79900A61E5F85D54D0E51E2D5945D8B713156E978D5A512281000000000001E2402002280130DCBA0B380240F2A8B7C20648F6A8B7C20650015A2400000020B8546B7514D6137248ABC01CAC30B69943BDFE55912BE62D388976B22FC18311";

        PacketDecoder.TssMessage memory tssm = message.decodeTssMessage();

        assertEq(tssm.originatorHash, _ORIGINATOR_HASH);
        assertEq(tssm.signingId, uint64(1549098));
        assertEq(
            uint8(tssm.encoderType),
            uint8(PacketDecoder.EncoderType.PROTO)
        );
        assertEq(tssm.sourceTimestamp, uint64(1749931126));
    }
}
